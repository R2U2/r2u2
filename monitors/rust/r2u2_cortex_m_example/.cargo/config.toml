[target.thumbv7m-none-eabi]
# uncomment this to make `cargo run` execute programs on QEMU
# runner = "qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel"

[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
runner = "arm-none-eabi-gdb -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x openocd.gdb"

rustflags = [
  # By default, the LLD linker is used, which is shipped with the Rust
  # toolchain. If you run into problems with LLD, you can switch to the
  # GNU linker by uncommenting this line:
  # "-C", "linker=arm-none-eabi-ld",

  # If you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by uncommenting the three lines below:
  # "-C", "linker=arm-none-eabi-gcc",
  # "-C", "link-arg=-Wl,-Tlink.x",
  # "-C", "link-arg=-nostartfiles",

  # Stack Overflow protection
  # See https://github.com/knurling-rs/flip-link
  "-C", "linker=flip-link",
  # Set the linker script to the one provided by cortex-m-rt.
  "-C", "link-arg=-Tlink.x",
  # `--nmagic` is required if memory section addresses are not aligned to 0x10000,
  # for example the FLASH and RAM sections in your `memory.x`.
  "-C", "link-arg=--nmagic",
]

[build]
# If targeting micrcontroller, pick ONE of these default compilation targets
# target = "thumbv6m-none-eabi"        # Cortex-M0 and Cortex-M0+
# target = "thumbv7m-none-eabi"        # Cortex-M3 -> QEMU
# target = "thumbv7em-none-eabi"       # Cortex-M4 and Cortex-M7 (no FPU)
target = "thumbv7em-none-eabihf"     # Cortex-M4F and Cortex-M7F (with FPU) -> STM32F3DISCOVERY
# target = "thumbv8m.base-none-eabi"   # Cortex-M23
# target = "thumbv8m.main-none-eabi"   # Cortex-M33 (no FPU)
# target = "thumbv8m.main-none-eabihf" # Cortex-M33 (with FPU)

# Set the static memory allocated for R2U2 (run `$ cargo clean` if these values are changed)
[env]
R2U2_MAX_OUTPUT_VERDICTS = { value = "4", force = true }
R2U2_MAX_SIGNALS = { value = "0", force = true }
R2U2_MAX_ATOMICS = { value = "1", force = true }
R2U2_MAX_BZ_INSTRUCTIONS = { value = "0", force = true }
R2U2_MAX_TL_INSTRUCTIONS = { value = "6", force = true }
R2U2_MAX_QUEUE_SLOTS = { value = "6", force = true }