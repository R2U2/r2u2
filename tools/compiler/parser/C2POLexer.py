# Generated from C2PO.g by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,69,431,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,186,8,
        13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,3,22,224,8,
        22,1,23,1,23,1,23,3,23,229,8,23,1,24,1,24,1,24,1,24,3,24,235,8,24,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,246,8,25,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,259,8,26,
        1,27,1,27,1,27,1,28,1,28,1,28,3,28,267,8,28,1,29,1,29,1,29,3,29,
        272,8,29,1,30,1,30,1,30,3,30,277,8,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,
        39,1,40,1,40,1,40,1,40,3,40,302,8,40,1,41,3,41,305,8,41,1,42,3,42,
        308,8,42,1,43,1,43,1,44,3,44,313,8,44,1,45,3,45,316,8,45,1,46,3,
        46,319,8,46,1,47,3,47,322,8,47,1,48,3,48,325,8,48,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,334,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,3,50,343,8,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
        1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,
        1,62,1,62,1,63,1,63,1,64,1,64,1,64,5,64,374,8,64,10,64,12,64,377,
        9,64,1,65,3,65,380,8,65,1,65,4,65,383,8,65,11,65,12,65,384,1,65,
        1,65,4,65,389,8,65,11,65,12,65,390,1,66,3,66,394,8,66,1,66,1,66,
        5,66,398,8,66,10,66,12,66,401,9,66,1,66,3,66,404,8,66,1,67,1,67,
        1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,71,1,71,5,71,418,8,71,
        10,71,12,71,421,9,71,1,71,1,71,1,72,4,72,426,8,72,11,72,12,72,427,
        1,72,1,72,0,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,
        127,64,129,65,131,66,133,67,135,0,137,0,139,0,141,0,143,68,145,69,
        1,0,19,2,0,33,33,172,172,2,0,38,38,8743,8743,2,0,124,124,8744,8744,
        3,0,42,42,8226,8226,8901,8901,2,0,47,47,247,247,3,0,71,71,9633,9633,
        120022,120022,5,0,70,70,8900,8900,9674,9674,9826,9826,120021,120021,
        2,0,88,88,9675,9675,2,0,83,83,120034,120034,2,0,79,79,120030,120030,
        2,0,85,85,120036,120036,2,0,82,82,120033,120033,2,0,72,72,120023,
        120023,2,0,43,43,45,45,1,0,48,57,1,0,49,57,3,0,65,90,95,95,97,122,
        2,0,10,10,13,13,3,0,9,10,13,13,32,32,451,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
        123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
        0,0,0,133,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,0,0,0,3,149,
        1,0,0,0,5,151,1,0,0,0,7,153,1,0,0,0,9,155,1,0,0,0,11,157,1,0,0,0,
        13,159,1,0,0,0,15,161,1,0,0,0,17,163,1,0,0,0,19,165,1,0,0,0,21,167,
        1,0,0,0,23,169,1,0,0,0,25,171,1,0,0,0,27,185,1,0,0,0,29,187,1,0,
        0,0,31,191,1,0,0,0,33,198,1,0,0,0,35,203,1,0,0,0,37,209,1,0,0,0,
        39,213,1,0,0,0,41,215,1,0,0,0,43,217,1,0,0,0,45,223,1,0,0,0,47,228,
        1,0,0,0,49,234,1,0,0,0,51,245,1,0,0,0,53,258,1,0,0,0,55,260,1,0,
        0,0,57,266,1,0,0,0,59,271,1,0,0,0,61,276,1,0,0,0,63,278,1,0,0,0,
        65,280,1,0,0,0,67,282,1,0,0,0,69,284,1,0,0,0,71,286,1,0,0,0,73,288,
        1,0,0,0,75,290,1,0,0,0,77,292,1,0,0,0,79,295,1,0,0,0,81,301,1,0,
        0,0,83,304,1,0,0,0,85,307,1,0,0,0,87,309,1,0,0,0,89,312,1,0,0,0,
        91,315,1,0,0,0,93,318,1,0,0,0,95,321,1,0,0,0,97,324,1,0,0,0,99,333,
        1,0,0,0,101,342,1,0,0,0,103,344,1,0,0,0,105,346,1,0,0,0,107,348,
        1,0,0,0,109,350,1,0,0,0,111,352,1,0,0,0,113,354,1,0,0,0,115,356,
        1,0,0,0,117,358,1,0,0,0,119,360,1,0,0,0,121,362,1,0,0,0,123,364,
        1,0,0,0,125,366,1,0,0,0,127,368,1,0,0,0,129,370,1,0,0,0,131,379,
        1,0,0,0,133,403,1,0,0,0,135,405,1,0,0,0,137,407,1,0,0,0,139,409,
        1,0,0,0,141,411,1,0,0,0,143,413,1,0,0,0,145,425,1,0,0,0,147,148,
        5,44,0,0,148,2,1,0,0,0,149,150,5,58,0,0,150,4,1,0,0,0,151,152,5,
        59,0,0,152,6,1,0,0,0,153,154,5,10216,0,0,154,8,1,0,0,0,155,156,5,
        10217,0,0,156,10,1,0,0,0,157,158,5,61,0,0,158,12,1,0,0,0,159,160,
        5,63,0,0,160,14,1,0,0,0,161,162,5,40,0,0,162,16,1,0,0,0,163,164,
        5,41,0,0,164,18,1,0,0,0,165,166,5,123,0,0,166,20,1,0,0,0,167,168,
        5,125,0,0,168,22,1,0,0,0,169,170,5,91,0,0,170,24,1,0,0,0,171,172,
        5,93,0,0,172,26,1,0,0,0,173,174,5,98,0,0,174,175,5,111,0,0,175,176,
        5,111,0,0,176,186,5,108,0,0,177,178,5,105,0,0,178,179,5,110,0,0,
        179,186,5,116,0,0,180,181,5,102,0,0,181,182,5,108,0,0,182,183,5,
        111,0,0,183,184,5,97,0,0,184,186,5,116,0,0,185,173,1,0,0,0,185,177,
        1,0,0,0,185,180,1,0,0,0,186,28,1,0,0,0,187,188,5,86,0,0,188,189,
        5,65,0,0,189,190,5,82,0,0,190,30,1,0,0,0,191,192,5,68,0,0,192,193,
        5,69,0,0,193,194,5,70,0,0,194,195,5,73,0,0,195,196,5,78,0,0,196,
        197,5,69,0,0,197,32,1,0,0,0,198,199,5,83,0,0,199,200,5,80,0,0,200,
        201,5,69,0,0,201,202,5,67,0,0,202,34,1,0,0,0,203,204,5,79,0,0,204,
        205,5,114,0,0,205,206,5,100,0,0,206,207,5,101,0,0,207,208,5,114,
        0,0,208,36,1,0,0,0,209,210,5,115,0,0,210,211,5,101,0,0,211,212,5,
        116,0,0,212,38,1,0,0,0,213,214,7,0,0,0,214,40,1,0,0,0,215,216,7,
        1,0,0,216,42,1,0,0,0,217,218,7,2,0,0,218,44,1,0,0,0,219,220,5,88,
        0,0,220,221,5,79,0,0,221,224,5,82,0,0,222,224,5,8853,0,0,223,219,
        1,0,0,0,223,222,1,0,0,0,224,46,1,0,0,0,225,226,5,45,0,0,226,229,
        5,62,0,0,227,229,5,8594,0,0,228,225,1,0,0,0,228,227,1,0,0,0,229,
        48,1,0,0,0,230,231,5,60,0,0,231,232,5,45,0,0,232,235,5,62,0,0,233,
        235,5,8596,0,0,234,230,1,0,0,0,234,233,1,0,0,0,235,50,1,0,0,0,236,
        237,5,84,0,0,237,238,5,82,0,0,238,239,5,85,0,0,239,246,5,69,0,0,
        240,241,5,116,0,0,241,242,5,114,0,0,242,243,5,117,0,0,243,246,5,
        101,0,0,244,246,5,8868,0,0,245,236,1,0,0,0,245,240,1,0,0,0,245,244,
        1,0,0,0,246,52,1,0,0,0,247,248,5,70,0,0,248,249,5,65,0,0,249,250,
        5,76,0,0,250,251,5,83,0,0,251,259,5,69,0,0,252,253,5,102,0,0,253,
        254,5,97,0,0,254,255,5,108,0,0,255,256,5,115,0,0,256,259,5,101,0,
        0,257,259,5,8869,0,0,258,247,1,0,0,0,258,252,1,0,0,0,258,257,1,0,
        0,0,259,54,1,0,0,0,260,261,5,61,0,0,261,262,5,61,0,0,262,56,1,0,
        0,0,263,264,5,33,0,0,264,267,5,61,0,0,265,267,5,8800,0,0,266,263,
        1,0,0,0,266,265,1,0,0,0,267,58,1,0,0,0,268,269,5,62,0,0,269,272,
        5,61,0,0,270,272,5,8805,0,0,271,268,1,0,0,0,271,270,1,0,0,0,272,
        60,1,0,0,0,273,274,5,60,0,0,274,277,5,61,0,0,275,277,5,8804,0,0,
        276,273,1,0,0,0,276,275,1,0,0,0,277,62,1,0,0,0,278,279,5,62,0,0,
        279,64,1,0,0,0,280,281,5,60,0,0,281,66,1,0,0,0,282,283,5,43,0,0,
        283,68,1,0,0,0,284,285,5,45,0,0,285,70,1,0,0,0,286,287,7,3,0,0,287,
        72,1,0,0,0,288,289,7,4,0,0,289,74,1,0,0,0,290,291,5,37,0,0,291,76,
        1,0,0,0,292,293,5,42,0,0,293,294,5,42,0,0,294,78,1,0,0,0,295,296,
        5,8730,0,0,296,80,1,0,0,0,297,298,5,43,0,0,298,299,5,47,0,0,299,
        302,5,45,0,0,300,302,5,177,0,0,301,297,1,0,0,0,301,300,1,0,0,0,302,
        82,1,0,0,0,303,305,7,5,0,0,304,303,1,0,0,0,305,84,1,0,0,0,306,308,
        7,6,0,0,307,306,1,0,0,0,308,86,1,0,0,0,309,310,7,7,0,0,310,88,1,
        0,0,0,311,313,7,8,0,0,312,311,1,0,0,0,313,90,1,0,0,0,314,316,7,9,
        0,0,315,314,1,0,0,0,316,92,1,0,0,0,317,319,7,10,0,0,318,317,1,0,
        0,0,319,94,1,0,0,0,320,322,7,11,0,0,321,320,1,0,0,0,322,96,1,0,0,
        0,323,325,7,12,0,0,324,323,1,0,0,0,325,98,1,0,0,0,326,327,5,70,0,
        0,327,328,5,79,0,0,328,329,5,82,0,0,329,330,5,65,0,0,330,331,5,76,
        0,0,331,334,5,76,0,0,332,334,5,8704,0,0,333,326,1,0,0,0,333,332,
        1,0,0,0,334,100,1,0,0,0,335,336,5,69,0,0,336,337,5,88,0,0,337,338,
        5,73,0,0,338,339,5,83,0,0,339,340,5,84,0,0,340,343,5,83,0,0,341,
        343,5,8707,0,0,342,335,1,0,0,0,342,341,1,0,0,0,343,102,1,0,0,0,344,
        345,5,8709,0,0,345,104,1,0,0,0,346,347,5,8712,0,0,347,106,1,0,0,
        0,348,349,5,8834,0,0,349,108,1,0,0,0,350,351,5,8838,0,0,351,110,
        1,0,0,0,352,353,5,8835,0,0,353,112,1,0,0,0,354,355,5,8839,0,0,355,
        114,1,0,0,0,356,357,5,8721,0,0,357,116,1,0,0,0,358,359,5,8719,0,
        0,359,118,1,0,0,0,360,361,5,8899,0,0,361,120,1,0,0,0,362,363,5,8898,
        0,0,363,122,1,0,0,0,364,365,5,8896,0,0,365,124,1,0,0,0,366,367,5,
        8897,0,0,367,126,1,0,0,0,368,369,5,215,0,0,369,128,1,0,0,0,370,375,
        3,141,70,0,371,374,3,141,70,0,372,374,3,137,68,0,373,371,1,0,0,0,
        373,372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,
        376,130,1,0,0,0,377,375,1,0,0,0,378,380,3,135,67,0,379,378,1,0,0,
        0,379,380,1,0,0,0,380,382,1,0,0,0,381,383,3,137,68,0,382,381,1,0,
        0,0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,386,1,0,
        0,0,386,388,5,46,0,0,387,389,3,137,68,0,388,387,1,0,0,0,389,390,
        1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,132,1,0,0,0,392,394,
        3,135,67,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,399,
        3,139,69,0,396,398,3,137,68,0,397,396,1,0,0,0,398,401,1,0,0,0,399,
        397,1,0,0,0,399,400,1,0,0,0,400,404,1,0,0,0,401,399,1,0,0,0,402,
        404,5,48,0,0,403,393,1,0,0,0,403,402,1,0,0,0,404,134,1,0,0,0,405,
        406,7,13,0,0,406,136,1,0,0,0,407,408,7,14,0,0,408,138,1,0,0,0,409,
        410,7,15,0,0,410,140,1,0,0,0,411,412,7,16,0,0,412,142,1,0,0,0,413,
        414,5,45,0,0,414,415,5,45,0,0,415,419,1,0,0,0,416,418,8,17,0,0,417,
        416,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
        422,1,0,0,0,421,419,1,0,0,0,422,423,6,71,0,0,423,144,1,0,0,0,424,
        426,7,18,0,0,425,424,1,0,0,0,426,427,1,0,0,0,427,425,1,0,0,0,427,
        428,1,0,0,0,428,429,1,0,0,0,429,430,6,72,1,0,430,146,1,0,0,0,30,
        0,185,223,228,234,245,258,266,271,276,301,304,307,312,315,318,321,
        324,333,342,373,375,379,384,390,393,399,403,419,427,2,6,0,0,0,1,
        0
    ]

class C2POLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    BASE_TYPE = 14
    KW_VAR = 15
    KW_DEF = 16
    KW_SPEC = 17
    KW_ORDER = 18
    KW_SET = 19
    LOG_NEG = 20
    LOG_AND = 21
    LOG_OR = 22
    LOG_XOR = 23
    LOG_IMPL = 24
    LOG_IFF = 25
    TRUE = 26
    FALSE = 27
    REL_EQ = 28
    REL_NEQ = 29
    REL_GTE = 30
    REL_LTE = 31
    REL_GT = 32
    REL_LT = 33
    ARITH_ADD = 34
    ARITH_SUB = 35
    ARITH_MUL = 36
    ARITH_DIV = 37
    ARITH_MOD = 38
    ARITH_POW = 39
    ARITH_SQRT = 40
    ARITH_PM = 41
    TL_GLOBAL = 42
    TL_FUTURE = 43
    TL_NEXT = 44
    TL_SINCE = 45
    TL_ONCE = 46
    TL_UNTIL = 47
    TL_RELEASE = 48
    TL_HISTORICAL = 49
    FO_FORALL = 50
    FO_EXISTS = 51
    SW_EMPTY_SET = 52
    SW_MEMBER = 53
    SW_SUBSET = 54
    SW_SUBSETEQ = 55
    SW_SUPSET = 56
    SW_SUPSETEQ = 57
    SW_SUM = 58
    SW_PROD = 59
    SW_UNION = 60
    SW_INTERSECTION = 61
    SW_AND = 62
    SW_OR = 63
    SW_CTPROD = 64
    IDENTIFIER = 65
    FLOAT = 66
    INT = 67
    COMMENT = 68
    WS = 69

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "':'", "';'", "'\\u27E8'", "'\\u27E9'", "'='", "'?'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "'VAR'", "'DEFINE'", 
            "'SPEC'", "'Order'", "'set'", "'=='", "'>'", "'<'", "'+'", "'-'", 
            "'%'", "'**'", "'\\u221A'", "'\\u2205'", "'\\u2208'", "'\\u2282'", 
            "'\\u2286'", "'\\u2283'", "'\\u2287'", "'\\u2211'", "'\\u220F'", 
            "'\\u22C3'", "'\\u22C2'", "'\\u22C0'", "'\\u22C1'", "'\\u00D7'" ]

    symbolicNames = [ "<INVALID>",
            "BASE_TYPE", "KW_VAR", "KW_DEF", "KW_SPEC", "KW_ORDER", "KW_SET", 
            "LOG_NEG", "LOG_AND", "LOG_OR", "LOG_XOR", "LOG_IMPL", "LOG_IFF", 
            "TRUE", "FALSE", "REL_EQ", "REL_NEQ", "REL_GTE", "REL_LTE", 
            "REL_GT", "REL_LT", "ARITH_ADD", "ARITH_SUB", "ARITH_MUL", "ARITH_DIV", 
            "ARITH_MOD", "ARITH_POW", "ARITH_SQRT", "ARITH_PM", "TL_GLOBAL", 
            "TL_FUTURE", "TL_NEXT", "TL_SINCE", "TL_ONCE", "TL_UNTIL", "TL_RELEASE", 
            "TL_HISTORICAL", "FO_FORALL", "FO_EXISTS", "SW_EMPTY_SET", "SW_MEMBER", 
            "SW_SUBSET", "SW_SUBSETEQ", "SW_SUPSET", "SW_SUPSETEQ", "SW_SUM", 
            "SW_PROD", "SW_UNION", "SW_INTERSECTION", "SW_AND", "SW_OR", 
            "SW_CTPROD", "IDENTIFIER", "FLOAT", "INT", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "BASE_TYPE", 
                  "KW_VAR", "KW_DEF", "KW_SPEC", "KW_ORDER", "KW_SET", "LOG_NEG", 
                  "LOG_AND", "LOG_OR", "LOG_XOR", "LOG_IMPL", "LOG_IFF", 
                  "TRUE", "FALSE", "REL_EQ", "REL_NEQ", "REL_GTE", "REL_LTE", 
                  "REL_GT", "REL_LT", "ARITH_ADD", "ARITH_SUB", "ARITH_MUL", 
                  "ARITH_DIV", "ARITH_MOD", "ARITH_POW", "ARITH_SQRT", "ARITH_PM", 
                  "TL_GLOBAL", "TL_FUTURE", "TL_NEXT", "TL_SINCE", "TL_ONCE", 
                  "TL_UNTIL", "TL_RELEASE", "TL_HISTORICAL", "FO_FORALL", 
                  "FO_EXISTS", "SW_EMPTY_SET", "SW_MEMBER", "SW_SUBSET", 
                  "SW_SUBSETEQ", "SW_SUPSET", "SW_SUPSETEQ", "SW_SUM", "SW_PROD", 
                  "SW_UNION", "SW_INTERSECTION", "SW_AND", "SW_OR", "SW_CTPROD", 
                  "IDENTIFIER", "FLOAT", "INT", "SIGN", "DIGIT", "NONZERODIGIT", 
                  "LETTER", "COMMENT", "WS" ]

    grammarFileName = "C2PO.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


