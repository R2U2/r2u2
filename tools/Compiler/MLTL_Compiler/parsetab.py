
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftGLOBALUNTILleftNEGNEXTleftLPARENRPARENATOMICLBRACKRBRACKAND ATOMIC COMMA FALSE FUTURE GLOBAL LBRACK LPAREN NEG NEXT NUMBER OR RBRACK RPAREN TRUE UNTIL\n\texpression \t: expression AND expression\n\t\t\t\t| NEG expression\n\t\t\t\t| NEXT expression\n\t\t\t\t| expression OR expression\n\t\t\t\t| FUTURE LBRACK NUMBER RBRACK expression\n\t\t\t\t| FUTURE LBRACK NUMBER COMMA NUMBER RBRACK expression\n\t\t\t\t| GLOBAL LBRACK NUMBER RBRACK expression\n\t\t\t\t| GLOBAL LBRACK NUMBER COMMA NUMBER RBRACK expression\n\t\t\t\t| expression UNTIL LBRACK NUMBER RBRACK expression\n\t\t\t\t| expression UNTIL LBRACK NUMBER COMMA NUMBER RBRACK expression\n\texpression : LPAREN expression RPARENexpression : ATOMIC\n\texpression : TRUE\n\t\t\t\t| FALSE\n\t'
    
_lr_action_items = {'NEG':([0,2,3,6,10,11,25,27,29,37,38,39,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'NEXT':([0,2,3,6,10,11,25,27,29,37,38,39,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'FUTURE':([0,2,3,6,10,11,25,27,29,37,38,39,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'GLOBAL':([0,2,3,6,10,11,25,27,29,37,38,39,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,2,3,6,10,11,25,27,29,37,38,39,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'ATOMIC':([0,2,3,6,10,11,25,27,29,37,38,39,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'TRUE':([0,2,3,6,10,11,25,27,29,37,38,39,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'FALSE':([0,2,3,6,10,11,25,27,29,37,38,39,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'$end':([1,7,8,9,13,14,18,19,23,31,33,35,40,41,42,],[0,-12,-13,-14,-2,-3,-1,-4,-11,-5,-7,-9,-6,-8,-10,]),'AND':([1,7,8,9,13,14,17,18,19,23,31,33,35,40,41,42,],[10,-12,-13,-14,-2,-3,10,-1,-4,-11,-5,-7,-9,-6,-8,-10,]),'OR':([1,7,8,9,13,14,17,18,19,23,31,33,35,40,41,42,],[11,-12,-13,-14,-2,-3,11,-1,-4,-11,-5,-7,-9,-6,-8,-10,]),'UNTIL':([1,7,8,9,13,14,17,18,19,23,31,33,35,40,41,42,],[12,-12,-13,-14,-2,-3,12,12,12,-11,-5,-7,-9,-6,-8,-10,]),'LBRACK':([4,5,12,],[15,16,20,]),'RPAREN':([7,8,9,13,14,17,18,19,23,31,33,35,40,41,42,],[-12,-13,-14,-2,-3,23,-1,-4,-11,-5,-7,-9,-6,-8,-10,]),'NUMBER':([15,16,20,26,28,30,],[21,22,24,32,34,36,]),'RBRACK':([21,22,24,32,34,36,],[25,27,29,37,38,39,]),'COMMA':([21,22,24,],[26,28,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,6,10,11,25,27,29,37,38,39,],[1,13,14,17,18,19,31,33,35,40,41,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression AND expression','expression',3,'p_MLTL_operators','MLTLparse.py',25),
  ('expression -> NEG expression','expression',2,'p_MLTL_operators','MLTLparse.py',26),
  ('expression -> NEXT expression','expression',2,'p_MLTL_operators','MLTLparse.py',27),
  ('expression -> expression OR expression','expression',3,'p_MLTL_operators','MLTLparse.py',28),
  ('expression -> FUTURE LBRACK NUMBER RBRACK expression','expression',5,'p_MLTL_operators','MLTLparse.py',29),
  ('expression -> FUTURE LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_MLTL_operators','MLTLparse.py',30),
  ('expression -> GLOBAL LBRACK NUMBER RBRACK expression','expression',5,'p_MLTL_operators','MLTLparse.py',31),
  ('expression -> GLOBAL LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_MLTL_operators','MLTLparse.py',32),
  ('expression -> expression UNTIL LBRACK NUMBER RBRACK expression','expression',6,'p_MLTL_operators','MLTLparse.py',33),
  ('expression -> expression UNTIL LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',8,'p_MLTL_operators','MLTLparse.py',34),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_paren_token','MLTLparse.py',66),
  ('expression -> ATOMIC','expression',1,'p_atomic_token','MLTLparse.py',70),
  ('expression -> TRUE','expression',1,'p_bool_token','MLTLparse.py',76),
  ('expression -> FALSE','expression',1,'p_bool_token','MLTLparse.py',77),
]
