
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDleftGLOBALUNTILleftNEGleftLPARENRPARENATOMICLBRACKRBRACKAND ATOMIC COMMA GLOBAL LBRACK LPAREN NEG NEXT NUMBER OR RBRACK RPAREN UNTIL\n\texpression \t: expression AND expression\n\t\t\t\t| NEG expression\n\t\t\t\t| NEXT expression\n\t\t\t\t| expression OR expression\n\t\t\t\t| GLOBAL LBRACK NUMBER RBRACK expression\n\t\t\t\t| GLOBAL LBRACK NUMBER COMMA NUMBER RBRACK expression\n\t\t\t\t| expression UNTIL LBRACK NUMBER RBRACK expression\n\t\t\t\t| expression UNTIL LBRACK NUMBER COMMA NUMBER RBRACK expression\t\t\t\t\n\texpression : LPAREN expression RPARENexpression : ATOMIC'
    
_lr_action_items = {'NEG':([0,2,3,5,7,8,20,22,28,29,],[2,2,2,2,2,2,2,2,2,2,]),'NEXT':([0,2,3,5,7,8,20,22,28,29,],[3,3,3,3,3,3,3,3,3,3,]),'GLOBAL':([0,2,3,5,7,8,20,22,28,29,],[4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,2,3,5,7,8,20,22,28,29,],[5,5,5,5,5,5,5,5,5,5,]),'ATOMIC':([0,2,3,5,7,8,20,22,28,29,],[6,6,6,6,6,6,6,6,6,6,]),'$end':([1,6,10,11,14,15,18,24,26,30,31,],[0,-10,-2,-3,-1,-4,-9,-5,-7,-6,-8,]),'AND':([1,6,10,11,13,14,15,18,24,26,30,31,],[7,-10,-2,7,7,-1,7,-9,-5,-7,-6,-8,]),'OR':([1,6,10,11,13,14,15,18,24,26,30,31,],[8,-10,-2,8,8,-1,8,-9,-5,-7,-6,-8,]),'UNTIL':([1,6,10,11,13,14,15,18,24,26,30,31,],[9,-10,-2,9,9,9,9,-9,-5,-7,-6,-8,]),'LBRACK':([4,9,],[12,16,]),'RPAREN':([6,10,11,13,14,15,18,24,26,30,31,],[-10,-2,-3,18,-1,-4,-9,-5,-7,-6,-8,]),'NUMBER':([12,16,21,23,],[17,19,25,27,]),'RBRACK':([17,19,25,27,],[20,22,28,29,]),'COMMA':([17,19,],[21,23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,5,7,8,20,22,28,29,],[1,10,11,13,14,15,24,26,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression AND expression','expression',3,'p_MLTL_operators','MLTLparse.py',25),
  ('expression -> NEG expression','expression',2,'p_MLTL_operators','MLTLparse.py',26),
  ('expression -> NEXT expression','expression',2,'p_MLTL_operators','MLTLparse.py',27),
  ('expression -> expression OR expression','expression',3,'p_MLTL_operators','MLTLparse.py',28),
  ('expression -> GLOBAL LBRACK NUMBER RBRACK expression','expression',5,'p_MLTL_operators','MLTLparse.py',29),
  ('expression -> GLOBAL LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_MLTL_operators','MLTLparse.py',30),
  ('expression -> expression UNTIL LBRACK NUMBER RBRACK expression','expression',6,'p_MLTL_operators','MLTLparse.py',31),
  ('expression -> expression UNTIL LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',8,'p_MLTL_operators','MLTLparse.py',32),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_paren_token','MLTLparse.py',57),
  ('expression -> ATOMIC','expression',1,'p_atomic_token','MLTLparse.py',61),
]
