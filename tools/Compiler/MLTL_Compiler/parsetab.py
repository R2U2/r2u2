
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSEMIleftCOMMAleftANDORIMPLYEQleftGLOBALFUTUREUNTILRELEASEleftNEGYESTERDAYSINCEleftLPARENRPARENATOMICLBRACKRBRACKAND ATOMIC COMMA EQ FALSE FUTURE GLOBAL HISTORICALLY IMPLY LBRACK LPAREN NEG NUMBER ONCE OR RBRACK RELEASE RPAREN SEMI SINCE TRUE UNTIL YESTERDAY\n    program : program statement\n            | statement\n    \n    statement : expression SEMI\n    \n    expression  : expression AND expression\n                | NEG expression\n                | expression OR expression\n    \n    expression  : GLOBAL LBRACK NUMBER RBRACK expression\n                | GLOBAL LBRACK NUMBER COMMA NUMBER RBRACK expression\n                | FUTURE LBRACK NUMBER RBRACK expression\n                | FUTURE LBRACK NUMBER COMMA NUMBER RBRACK expression\n                | expression UNTIL LBRACK NUMBER RBRACK expression\n                | expression UNTIL LBRACK NUMBER COMMA NUMBER RBRACK expression\n                | expression RELEASE LBRACK NUMBER RBRACK expression\n                | expression RELEASE LBRACK NUMBER COMMA NUMBER RBRACK expression\n    \n    expression  : YESTERDAY expression\n                | expression SINCE LBRACK NUMBER RBRACK expression\n                | expression SINCE LBRACK NUMBER COMMA NUMBER RBRACK expression\n                | expression EQ expression\n                | expression IMPLY expression\n                | ONCE expression\n                | ONCE LBRACK NUMBER RBRACK expression\n                | ONCE LBRACK NUMBER COMMA NUMBER RBRACK expression\n                | HISTORICALLY expression\n                | HISTORICALLY LBRACK NUMBER RBRACK expression\n                | HISTORICALLY LBRACK NUMBER COMMA NUMBER RBRACK expression\n    expression : LPAREN expression RPARENexpression : ATOMIC\n    expression : TRUE\n               | FALSE\n    '
    
_lr_action_items = {'NEG':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[4,4,-2,4,4,4,4,4,-1,-3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'GLOBAL':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[5,5,-2,5,5,5,5,5,-1,-3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'FUTURE':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[6,6,-2,6,6,6,6,6,-1,-3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'YESTERDAY':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[7,7,-2,7,7,7,7,7,-1,-3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'ONCE':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[8,8,-2,8,8,8,8,8,-1,-3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'HISTORICALLY':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[9,9,-2,9,9,9,9,9,-1,-3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'LPAREN':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[10,10,-2,10,10,10,10,10,-1,-3,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'ATOMIC':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[11,11,-2,11,11,11,11,11,-1,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'TRUE':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[12,12,-2,12,12,12,12,12,-1,-3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'FALSE':([0,1,2,4,7,8,9,10,14,15,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[13,13,-2,13,13,13,13,13,-1,-3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'$end':([1,2,14,15,],[0,-2,-1,-3,]),'SEMI':([3,11,12,13,23,26,27,29,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[15,-27,-28,-29,-5,-15,-20,-23,-4,-6,-18,-19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'AND':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[16,-27,-28,-29,-5,-15,16,16,16,-4,-6,-18,-19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'OR':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[17,-27,-28,-29,-5,-15,17,17,17,-4,-6,-18,-19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'UNTIL':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[18,-27,-28,-29,-5,-15,18,18,18,18,18,18,18,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'RELEASE':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[19,-27,-28,-29,-5,-15,19,19,19,19,19,19,19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'SINCE':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[20,-27,-28,-29,-5,-15,20,20,20,20,20,20,20,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'EQ':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[21,-27,-28,-29,-5,-15,21,21,21,-4,-6,-18,-19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'IMPLY':([3,11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[22,-27,-28,-29,-5,-15,22,22,22,-4,-6,-18,-19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'LBRACK':([5,6,8,9,18,19,20,],[24,25,28,30,34,35,36,]),'RPAREN':([11,12,13,23,26,27,29,31,32,33,37,38,43,61,63,65,67,69,71,73,82,83,84,85,86,87,88,],[-27,-28,-29,-5,-15,-20,-23,43,-4,-6,-18,-19,-26,-7,-9,-21,-24,-11,-13,-16,-8,-10,-22,-25,-12,-14,-17,]),'NUMBER':([24,25,28,30,34,35,36,48,50,52,54,56,58,60,],[39,40,41,42,44,45,46,62,64,66,68,70,72,74,]),'RBRACK':([39,40,41,42,44,45,46,62,64,66,68,70,72,74,],[47,49,51,53,55,57,59,75,76,77,78,79,80,81,]),'COMMA':([39,40,41,42,44,45,46,],[48,50,52,54,56,58,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,14,]),'expression':([0,1,4,7,8,9,10,16,17,21,22,47,49,51,53,55,57,59,75,76,77,78,79,80,81,],[3,3,23,26,27,29,31,32,33,37,38,61,63,65,67,69,71,73,82,83,84,85,86,87,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','MLTLparse.py',21),
  ('program -> statement','program',1,'p_program','MLTLparse.py',22),
  ('statement -> expression SEMI','statement',2,'p_statement','MLTLparse.py',33),
  ('expression -> expression AND expression','expression',3,'p_prop_operators','MLTLparse.py',40),
  ('expression -> NEG expression','expression',2,'p_prop_operators','MLTLparse.py',41),
  ('expression -> expression OR expression','expression',3,'p_prop_operators','MLTLparse.py',42),
  ('expression -> GLOBAL LBRACK NUMBER RBRACK expression','expression',5,'p_ftMLTL_operators','MLTLparse.py',57),
  ('expression -> GLOBAL LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_ftMLTL_operators','MLTLparse.py',58),
  ('expression -> FUTURE LBRACK NUMBER RBRACK expression','expression',5,'p_ftMLTL_operators','MLTLparse.py',59),
  ('expression -> FUTURE LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_ftMLTL_operators','MLTLparse.py',60),
  ('expression -> expression UNTIL LBRACK NUMBER RBRACK expression','expression',6,'p_ftMLTL_operators','MLTLparse.py',61),
  ('expression -> expression UNTIL LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',8,'p_ftMLTL_operators','MLTLparse.py',62),
  ('expression -> expression RELEASE LBRACK NUMBER RBRACK expression','expression',6,'p_ftMLTL_operators','MLTLparse.py',63),
  ('expression -> expression RELEASE LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',8,'p_ftMLTL_operators','MLTLparse.py',64),
  ('expression -> YESTERDAY expression','expression',2,'p_ptMLTL_operators','MLTLparse.py',86),
  ('expression -> expression SINCE LBRACK NUMBER RBRACK expression','expression',6,'p_ptMLTL_operators','MLTLparse.py',87),
  ('expression -> expression SINCE LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',8,'p_ptMLTL_operators','MLTLparse.py',88),
  ('expression -> expression EQ expression','expression',3,'p_ptMLTL_operators','MLTLparse.py',89),
  ('expression -> expression IMPLY expression','expression',3,'p_ptMLTL_operators','MLTLparse.py',90),
  ('expression -> ONCE expression','expression',2,'p_ptMLTL_operators','MLTLparse.py',91),
  ('expression -> ONCE LBRACK NUMBER RBRACK expression','expression',5,'p_ptMLTL_operators','MLTLparse.py',92),
  ('expression -> ONCE LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_ptMLTL_operators','MLTLparse.py',93),
  ('expression -> HISTORICALLY expression','expression',2,'p_ptMLTL_operators','MLTLparse.py',94),
  ('expression -> HISTORICALLY LBRACK NUMBER RBRACK expression','expression',5,'p_ptMLTL_operators','MLTLparse.py',95),
  ('expression -> HISTORICALLY LBRACK NUMBER COMMA NUMBER RBRACK expression','expression',7,'p_ptMLTL_operators','MLTLparse.py',96),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_paren_token','MLTLparse.py',135),
  ('expression -> ATOMIC','expression',1,'p_atomic_token','MLTLparse.py',139),
  ('expression -> TRUE','expression',1,'p_bool_token','MLTLparse.py',145),
  ('expression -> FALSE','expression',1,'p_bool_token','MLTLparse.py',146),
]
