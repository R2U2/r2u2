//// Parser Rules

program: block*

block: var_block
     | def_block
     | spec_block
     | order_block

var_block: KW_VAR var_list
var_list: (IDENTIFIER ":" type ";")+ 

type: BASE_TYPE
    | KW_SET set_param

set_param: "<" BASE_TYPE ">"
         | "⟨" BASE_TYPE "⟩"

def_block: KW_DEF def_list
def_list: (IDENTIFIER "=" expr ";")+

spec_block: KW_SPEC spec_list
spec_list: (spec_label? expr ";")+
spec_label: IDENTIFIER ":"

order_block: KW_ORDER order_list
order_list: IDENTIFIER ("," IDENTIFIER)* ";"

expr: expr "?" expr ":" expr
    | expr LOG_OR expr
    | expr LOG_AND expr
    | expr BW_OR expr
    | expr BW_XOR expr
    | expr BW_AND expr
    | expr REL_OP expr
    | expr ARITH_ADD_OP expr
    | expr ARITH_MUL_OP expr
    | expr TL_BIN_OP interval expr
    | UNARY_OP expr 
    | TL_UNARY_OP interval expr 
    | IDENTIFIER "(" expr ")"
    | "(" expr ")"
    | NUMBER
    | LOG_LIT
    | IDENTIFIER

interval: "[" INT ("," INT)? "]"

//// Lexical Spec

// Types
BASE_TYPE: "bool"
         | "int"
         | "float"

// Op groups for precedence
UNARY_OP: LOG_NEG | BW_NEG 
TL_UNARY_OP: TL_GLOBALLY | TL_FUTURE | TL_SINCE | TL_ONCE 
TL_BIN_OP: TL_UNTIL | TL_RELEASE | TL_HISTORICALLY
REL_OP: REL_EQ | REL_NEQ | REL_GT 
      | REL_GTE | REL_LT | REL_LTE
ARITH_ADD_OP: ARITH_ADD | ARITH_SUB
ARITH_MUL_OP: ARITH_MUL | ARITH_DIV | ARITH_MOD

// Propositional logic ops/literals
LOG_NEG: "!" | "¬" 
LOG_AND: "&&" | "∨"
LOG_OR: "||" | "∧"
LOG_XOR: "XOR" | "⊕"
LOG_IMPL: "->" | "→"
LOG_IFF: "<->" | "↔" 
LOG_LIT: TRUE | FALSE
TRUE: "TRUE" | "true" | "⊤"
FALSE: "FALSE" | "false" | "⊥"

// Bitwise ops
BW_NEG: "~"
BW_AND: "&"
BW_OR: "|"
BW_XOR: "^"

// Relational ops
REL_EQ: "=="
REL_NEQ: "!=" | "≠"
REL_GT: ">"
REL_GTE: ">=" | "≥"
REL_LT: "<"
REL_LTE: "<=" | "≤" 

// Arithmetic ops
ARITH_ADD: "+"
ARITH_SUB: "-"
ARITH_MUL: "*" | "•" | "⋅"
ARITH_DIV: "/" | "÷"
ARITH_MOD: "MOD" | "%"
ARITH_POW: "**"
ARITH_SQRT: "SQRT" | "√"
ARITH_PM: "+-" | "±"

// Temporal ops
TL_GLOBALLY: "G" | "𝓖" | "□"
TL_FUTURE: "F" | "𝓕" | "⋄" | "♢"
TL_NEXT: "X" | "○"
TL_SINCE: "S" | "𝓢"
TL_ONCE: "O" | "𝓞"
TL_UNTIL: "U" | "𝓤"
TL_RELEASE: "R" | "𝓡"
TL_HISTORICALLY: "H" | "𝓗"

// First-order -- not used
FO_FORALL: "FORALL" | "∀"
FO_EXISTS: "EXISTS" | "∃"

// Set-wise ops -- not used
SW_EMPTY_SET: "∅"
SW_MEMBER: "IN" | "∈"
SW_SUBSET: "SUBSET" | "⊂"
SW_SUBSETEQ: "SUBSETEQ" | "⊆"
SW_SUPSET: "SUPSET" | "⊂"
SW_SUPSETEQ: "SUPSETEQ" | "⊇"
SW_SUM: "SUM" | "∑"
SW_PROD: "PROD" | "∏"
SW_UNION: "SETUNION" | "⋃"
SW_INTERSECTION: "SETINTERSECTION" | "⋂"
SW_AND: "SETAND" | "⋀"
SW_OR: "SETOR" | "⋁"
SW_CTPROD: "CTPROD" | "×" 

// Keywords
KW_VAR: "VAR"
KW_DEF: "DEF"
KW_SPEC: "SPEC"
KW_ORDER: "ORDER"
KW_SET: "SET"

// Identifiers
IDENTIFIER: CNAME ("₁".."ₓ")?
          | "Α".."ω"

%import common.NUMBER
%import common.INT
%import common.CNAME
%import common.SH_COMMENT
%import common.WS

%ignore SH_COMMENT
%ignore WS